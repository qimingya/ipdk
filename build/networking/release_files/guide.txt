## build docker image
	cd build/networking
	docker build -t p4-ovs-dpdk . -f Dockerfile.release --build-arg http_proxy=$http_proxy --build-arg https_proxy=$https_proxy --build-arg BASE_IMG=ubuntu:20.04

## Setup qemu
	/usr/bin/qemu-system-x86_64 -enable-kvm -cpu host -smp 8 -m 8192 -net user,hostfwd=tcp::6000-:22 -net nic -device vfio-pci,host=4b:00.0,id=net10 -drive file=/home/yiding/sonic/sonic-vs2.img,if=virtio -vnc :3 --daemonize
	ssh -p 6000 admin@localhost
	hugepages=`cat /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages`
	if [ -z "$hugepages" -o "X$hugepages" = "X0" ]
	then
	        echo 1024 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
	fi
	
	umount /dev/hugepages
	mkdir -p /mnt/hugepages
	mount -t hugetlbfs pagesize=2MB /mnt/hugepages
	modprobe uio_pci_generic
	./dpdk-devbind.py -b uio_pci_generic 00:04.0
## Copy files	
	scp -r root@10.239.252.174:/home/yiding/ipdk-fork/build/networking/release_files .
	scp root@10.239.252.174:/home/yiding/ipdk-fork/build/networking/p4-ovs-dpdk.tar .
	
	docker load <  p4-ovs-dpdk.tar
## Start docker
docker run --rm --cap-add ALL --name ipdk --privileged  -v /home/admin/release_files:/root/release  -v /root/.ipdk/volume:/tmp -p 9339:9339 -p 9559:9559  -p 2022:2022 p4-ovs-dpdk  -rcfile /root/scripts/start.sh > /dev/null 2&>1 &

## Add device (2 ^ N ports)
	docker exec -ti ipdk bash  
	gnmi-cli set "device:virtual-device,name:TAP0,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:physical-device,name:PORT0,control-port:TAP1,pci-bdf:0000:00:04.0,packet-dir:network,port-type:link" && sleep 1
	
	gnmi-cli set "device:virtual-device,name:TAP2,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP3,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP4,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP5,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP6,mtu:1500,port-type:TAP"  && sleep 1
	
	###  device <--> port
	# TAP0 -- port0
	# PCI  -- port1
	# TAP1 -- port2
	# TAP2 -- port3
	#  ……
	# TAP6 -- port7
	############################

## Load pipeline
	ovs-p4ctl set-pipe br0 /root/release/p4/bgp_over_vxlan.pb.bin /root/release/p4/p4Info.txt && sleep 1

## Add rules
	## port forward
	ovs-p4ctl add-entry br0 ingress.port_forward_table "ig_intr_md.ingress_port=6,action=ingress.send(7)"
	ovs-p4ctl add-entry br0 ingress.port_forward_table "ig_intr_md.ingress_port=7,action=ingress.send(6)"
	## vxlan encap, vni = 1
	ovs-p4ctl add-entry br0 ingress.push_vxlan_table "hdr.outer_ipv4.dst_ip=1.1.1.3,action=ingress.vxlan_encap(0xa0a1a2a30000, 0xb0b1b2b30000, 0x0800, 0x45, 0 , 50, 0, 0, 64, 17, 0xe928, 0xc0c10000, 0xd0d10000, 0xe000, 4789, 30, 0, 0, 0, 0, 1, 0)"
	## vxlan decap and forward to TAP3
	ovs-p4ctl add-entry br0 pop_vxlan_table "hdr.outer_vxlan.vni=3,action=ingress.vxlan_decap(4)"
## Send packets and tcpdump

## restart OVS
	ps aux|grep ovs|awk '{print $2}'|xargs kill
	cd /root/scripts
	. p4ovs_env_setup.sh /root/p4-sde/install
	cd /root
	/root/scripts/set_hugepages.sh
	/root/scripts/run_ovs.sh

