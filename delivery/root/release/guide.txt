## Add device (2 ^ N ports)
	docker exec -ti ipdk bash  
	gnmi-cli set "device:virtual-device,name:TAP0,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:physical-device,name:PORT0,control-port:TAP1,pci-bdf:0000:00:04.0,packet-dir:network,port-type:link" && sleep 1
	
	gnmi-cli set "device:virtual-device,name:TAP2,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP3,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP4,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP5,mtu:1500,port-type:TAP"  && sleep 1
	gnmi-cli set "device:virtual-device,name:TAP6,mtu:1500,port-type:TAP"  && sleep 1
	
	###  device <--> port
	# TAP0 -- port0
	# PCI  -- port1
	# TAP1 -- port2
	# TAP2 -- port3
	#  ……
	# TAP6 -- port7
	############################

## Load pipeline
	ovs-p4ctl set-pipe br0 /root/release/p4/bgp_over_vxlan.pb.bin /root/release/p4/p4Info.txt && sleep 1

## Add rules
	## port forward
	ovs-p4ctl add-entry br0 ingress.port_forward_table "ig_intr_md.ingress_port=6,action=ingress.send(7)"
	ovs-p4ctl add-entry br0 ingress.port_forward_table "ig_intr_md.ingress_port=7,action=ingress.send(6)"
	## vxlan encap, vni = 1
	ovs-p4ctl add-entry br0 ingress.push_vxlan_table "hdr.outer_ipv4.dst_ip=1.1.1.3,action=ingress.vxlan_encap(0xa0a1a2a30000, 0xb0b1b2b30000, 0x0800, 0x45, 0 , 50, 0, 0, 64, 17, 0xe928, 0xc0c10000, 0xd0d10000, 0xe000, 4789, 30, 0, 0, 0, 0, 1, 0)"
	## vxlan decap and forward to TAP3
	ovs-p4ctl add-entry br0 pop_vxlan_table "hdr.outer_vxlan.vni=3,action=ingress.vxlan_decap(4)"
## Send packets and tcpdump

